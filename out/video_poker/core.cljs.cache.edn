;; Analyzed by ClojureScript 0.0-3196
{:use-macros {cell= tailrecursion.javelin, defc tailrecursion.javelin, defc= tailrecursion.javelin}, :excludes #{}, :name video-poker.core, :imports nil, :requires {string clojure.string, clojure.string clojure.string, tailrecursion.javelin tailrecursion.javelin, cljs.reader cljs.reader, clojure.set clojure.set, s clojure.set}, :uses {cell tailrecursion.javelin, read-string cljs.reader}, :defs {available {:meta {:end-column 16, :end-line 41, :column 7, :line 41, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :line 41, :column 1, :end-line 41, :end-column 16, :test true, :name video-poker.core/available}, king? {:protocol-inline nil, :meta {:arglists (quote ([code])), :end-column 12, :end-line 155, :column 7, :line 155, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/king?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 12, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :test true}, two-pair? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 16, :end-line 119, :column 7, :line 119, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/two-pair?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 16, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, discarded {:meta {:end-column 16, :end-line 38, :column 7, :line 38, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :line 38, :column 1, :end-line 38, :end-column 16, :test true, :name video-poker.core/discarded}, straight? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 16, :end-line 160, :column 7, :line 160, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/straight?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 16, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, ace? {:protocol-inline nil, :meta {:arglists (quote ([code])), :end-column 11, :end-line 150, :column 7, :line 150, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/ace?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 11, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :test true}, suit-range {:meta {:end-column 16, :end-line 9, :column 6, :line 9, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :line 9, :column 1, :end-line 9, :end-column 16, :test true, :name video-poker.core/suit-range}, deal {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [pick]), :arglists ([] [pick]), :arglists-meta (nil nil)}, :arglists (quote ([] [pick])), :doc "Return a random card and update the available atom", :end-column 11, :end-line 54, :column 7, :line 54, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/deal, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [pick]), :arglists ([] [pick]), :arglists-meta (nil nil)}, :method-params ([] [pick]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists ([] [pick]), :doc "Return a random card and update the available atom", :test true}, flush? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 13, :end-line 179, :column 7, :line 179, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/flush?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 13, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, full-house? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 18, :end-line 187, :column 7, :line 187, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/full-house?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 18, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, straight-flush? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 22, :end-line 207, :column 7, :line 207, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/straight-flush?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 22, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, card-value {:protocol-inline nil, :meta {:arglists (quote ([code])), :doc "Given a card code, like H1 or CA, return a numeric value for sorting", :end-column 17, :end-line 89, :column 7, :line 89, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/card-value, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 17, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :doc "Given a card code, like H1 or CA, return a numeric value for sorting", :test true}, three-of-a-kind? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 23, :end-line 128, :column 7, :line 128, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/three-of-a-kind?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 23, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, card-values {:meta {:end-column 17, :end-line 51, :column 6, :line 51, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :line 51, :column 1, :end-line 51, :end-column 17, :test true, :name video-poker.core/card-values}, deck {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Creates a deck", :end-column 11, :end-line 23, :column 7, :line 23, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/deck, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Creates a deck", :test true}, suit-urls {:protocol-inline nil, :meta {:arglists (quote ([suit])), :doc "Construct a vector of urls corresponding to each card in the given suit", :end-column 16, :end-line 16, :column 7, :line 16, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/suit-urls, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 16, :method-params ([suit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([suit])), :doc "Construct a vector of urls corresponding to each card in the given suit", :test true}, count-same-suit {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 22, :end-line 100, :column 7, :line 100, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/count-same-suit, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 22, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, count-same-value {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 23, :end-line 95, :column 7, :line 95, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/count-same-value, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 23, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, reset-deck {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Resets all of the cells regarding cards dealt and available", :end-column 17, :end-line 44, :column 7, :line 44, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/reset-deck, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Resets all of the cells regarding cards dealt and available", :test true}, deck-map {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Creates a deck as a map", :end-column 15, :end-line 32, :column 7, :line 32, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/deck-map, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Creates a deck as a map", :test true}, four-of-a-kind? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 22, :end-line 198, :column 7, :line 198, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/four-of-a-kind?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 22, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, hands {:meta {:end-column 11, :end-line 242, :column 6, :line 242, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :line 242, :column 1, :end-line 242, :end-column 11, :test true, :name video-poker.core/hands}, suit-code {:protocol-inline nil, :meta {:arglists (quote ([code])), :end-column 16, :end-line 11, :column 7, :line 11, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/suit-code, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 16, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :test true}, read-hand {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 16, :end-line 254, :column 7, :line 254, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/read-hand, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 16, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, royal-flush? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 19, :end-line 218, :column 7, :line 218, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/royal-flush?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 19, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, high-card? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 17, :end-line 231, :column 7, :line 231, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/high-card?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 17, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, value-code {:protocol-inline nil, :meta {:arglists (quote ([code])), :doc "Return the value code (A, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, K, Q) for the\n   given card-code", :end-column 17, :end-line 80, :column 7, :line 80, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/value-code, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 17, :method-params ([code]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([code])), :doc "Return the value code (A, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, K, Q) for the\n   given card-code", :test true}, pairs {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 12, :end-line 105, :column 7, :line 105, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/pairs, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 12, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}, deal-hand {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [fixed num], :or {fixed nil, num 5}})], :arglists [[& {:keys [fixed num], :or {fixed nil, num 5}}]], :arglists-meta (nil)}, :arglists (quote ([& {:keys [fixed num], :or {fixed nil, num 5}}])), :doc "Return a random vector of card codes and their corresponding image urls", :end-column 16, :end-line 72, :column 7, :line 72, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/deal-hand, :variadic true, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [fixed num], :or {fixed nil, num 5}})], :arglists [[& {:keys [fixed num], :or {fixed nil, num 5}}]], :arglists-meta (nil)}, :method-params [({:keys [fixed num], :or {fixed nil, num 5}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists [[& {:keys [fixed num], :or {fixed nil, num 5}}]], :doc "Return a random vector of card codes and their corresponding image urls", :test true}, discard {:protocol-inline nil, :meta {:arglists (quote ([card])), :doc "Put a card in the discard pile", :end-column 14, :end-line 67, :column 7, :line 67, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/discard, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 14, :method-params ([card]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([card])), :doc "Put a card in the discard pile", :test true}, int-sequence? {:protocol-inline nil, :meta {:arglists (quote ([s])), :end-column 20, :end-line 137, :column 7, :line 137, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/int-sequence?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, pair? {:protocol-inline nil, :meta {:arglists (quote ([hand])), :end-column 12, :end-line 111, :column 7, :line 111, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs"}, :name video-poker.core/pair?, :variadic false, :file "/Users/jj/.boot/cache/tmp/Users/jj/Projects/hoplon-video-poker/a82/7o2s6s/video_poker/core.cljs", :end-column 12, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand])), :test true}}, :require-macros {tailrecursion.javelin tailrecursion.javelin}, :cljs.analyzer/constants {:order [:url :held :num :fixed :else], :seen #{:num :else :held :url :fixed}}, :doc nil}